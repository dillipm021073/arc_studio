#!/bin/bash

# Remote machine diagnostic script
# This script will help diagnose issues on the remote machine

echo "üîç Remote Machine Diagnostic Script"
echo "=================================="
echo ""
echo "Remote Details:"
echo "Host: inlnqw1502"
echo "User: abpwrk1" 
echo "Password: Unix11!"
echo "App Path: $HOME/dk/arc_studio"
echo ""
echo "Issues to investigate:"
echo "1. GET /api/auth/me - 401 Not authenticated"
echo "2. PUT /api/users/5 - 500 Failed to update user"
echo "3. POST /api/users - 500 Failed to create user"
echo ""
echo "SSH Commands to run on remote machine:"
echo "======================================="
echo ""
echo "1. Connect to remote:"
echo "   ssh abpwrk1@inlnqw1502"
echo "   Password: Unix11!"
echo ""
echo "2. Navigate to application:"
echo "   cd \$HOME/dk/arc_studio"
echo ""
echo "3. Check if storage.ts has the fix:"
echo "   grep -n 'autoXApiKey.*sql' server/storage.ts"
echo "   # Should return nothing if fix is applied"
echo ""
echo "4. Check for detailed error logs:"
echo "   tail -n 50 logs/*.log 2>/dev/null || echo 'No log files found'"
echo "   # Or check PM2 logs if using PM2:"
echo "   pm2 logs --lines 50 --err"
echo ""
echo "5. Check database connection:"
echo "   grep DATABASE_URL .env"
echo ""
echo "6. Test database connection:"
echo "   cat > test-db.js << 'EOF'"
echo "const { Client } = require('pg');"
echo "const client = new Client({"
echo "  connectionString: process.env.DATABASE_URL || 'postgresql://env10o:OnlyForTest123@incetks154:5432/paaspg'"
echo "});"
echo ""
echo "client.connect()"
echo "  .then(() => {"
echo "    console.log('‚úÖ Database connected');"
echo "    return client.query('SELECT COUNT(*) FROM users');"
echo "  })"
echo "  .then(res => {"
echo "    console.log('Users count:', res.rows[0].count);"
echo "    return client.query('SELECT id, username, role FROM users WHERE id = 5');"
echo "  })"
echo "  .then(res => {"
echo "    console.log('User 5:', res.rows[0] || 'Not found');"
echo "    client.end();"
echo "  })"
echo "  .catch(err => {"
echo "    console.error('‚ùå Error:', err.message);"
echo "    client.end();"
echo "  });"
echo "EOF"
echo "   node test-db.js"
echo ""
echo "7. Check if the application is running:"
echo "   ps aux | grep node | grep -v grep"
echo "   # Or if using PM2:"
echo "   pm2 status"
echo ""
echo "8. Check recent changes in storage.ts:"
echo "   ls -la server/storage.ts"
echo "   head -20 server/storage.ts | grep -n 'class\\|interface'"
echo ""
echo "9. Check for TypeScript build errors:"
echo "   npm run build"
echo ""
echo "10. View real-time logs while testing:"
echo "    # In one terminal:"
echo "    tail -f logs/*.log"
echo "    # Or with PM2:"
echo "    pm2 logs --raw"
echo "    # Then in browser, try the operations that fail"